using Dates
using Plots
using Formatting
using Query
using StatsPlots
using ColorSchemes
using Measures


function plot_title(title_text)
    scatter(
        1:2,
        marker=0, markeralpha=0,
        annotations=(1.5, 1.5, title_text),
        foreground_color_subplot=:white,
        axis=false, grid=false, leg=false)
end


function plot_balance(pv::PeriodicValues)
    dts = map(x -> x[1], pv.values)
    values = map(x -> x[2], pv.values)
    plot(dts, values;
        fontfamily="Computer Modern",
        title="Balance",
        linecolor="blue",
        linetype=:steppost,
        yformatter = y -> fmt(".0f", y),
        w=1,
        legend=false)
    ylims!((0, maximum(values)))
end


function plot_equity(pv::PeriodicValues)
    dts = map(x -> x[1], pv.values)
    values = map(x -> x[2], pv.values)
    plot(dts, values;
        fontfamily="Computer Modern",
        title="Equity",
        linecolor="green",
        linetype=:steppost,
        yformatter = y -> fmt(".0f", y),
        w=1,
        legend=false)
    # ylims!((0, maximum(values)))
end

function plot_equity_seq(pv::PeriodicValues)
    x = collect(1:length(pv.values))
    values = map(x -> x[2], pv.values)
    plot(x, values;
        fontfamily="Computer Modern",
        title="Equity",
        linecolor="green",
        linetype=:steppost,
        yformatter = y -> fmt(".0f", y),
        w=1,
        legend=false)
    # ylims!((0, maximum(values)))
end


function plot_open_orders(pv::PeriodicValues)
    dts = map(x -> x[1], pv.values)
    values = map(x -> x[2], pv.values)
    max_open = maximum(values)

    y_ticks = 0:max_open
    y_ticks_str = map(x -> fmt(".0f", x), y_ticks)

    plot(dts, values;
        fontfamily="Computer Modern",
        title="# open orders",
        color="black",
        linetype=:steppost,
        yticks=(y_ticks, y_ticks_str),
        legend=false)
    ylims!((0, maximum(values)))
end

function plot_open_orders_seq(pv::PeriodicValues)
    x = collect(1:length(pv.values))
    values = map(x -> x[2], pv.values)
    max_open = maximum(values)

    y_ticks = 0:max_open
    y_ticks_str = map(x -> fmt(".0f", x), y_ticks)

    plot(x, values;
        fontfamily="Computer Modern",
        title="# open orders",
        color="black",
        linetype=:steppost,
        yticks=(y_ticks, y_ticks_str),
        legend=false)
    ylims!((0, maximum(values)))
end



function plot_drawdown(pv::PeriodicValues)
    dts = map(x -> x[1], pv.values)
    values = map(x -> x[2], pv.values)
    plot(dts, values;
        fontfamily="Computer Modern",
        title="Drawdown",
        fill=(0, "red"),
        linecolor="red",
        linetype=:steppost,
        yformatter = y -> fmt(".0f", y),
        w=1,
        legend=false)
end

function plot_drawdown_seq(pv::PeriodicValues)
    x = collect(1:length(pv.values))
    values = map(x -> x[2], pv.values)
    plot(x, values;
        fontfamily="Computer Modern",
        title="Drawdown",
        fill=(0, "red"),
        linecolor="red",
        linetype=:steppost,
        yformatter = y -> fmt(".0f", y),
        w=1,
        legend=false)
end


function violin_nominal_returns_by_day(positions::Vector{Position})
    if length(positions) == 0
        return plot(title="No positions")
    end

    pos_by_day = positions |>
        @groupby(Dates.dayofweek(_.open_dt), calc_nominal_return_net(_)) |>
        @orderby(key(_)) |>
        collect;

    x_lbls = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
    y = []
    for group in pos_by_day
        push!(y, group)
    end

    violin(y,
        xticks=(1:length(y), x_lbls),
        fill="green",
        linewidth=0,
        title="Nominal returns by day (open date)",
        legend=false)
end



function violin_nominal_returns_by_hour(positions::Vector{Position})
    if length(positions) == 0
        return plot(title="No positions")
    end

    pos_by_hour = positions |>
        @groupby(Dates.hour(_.open_dt), calc_nominal_return_net(_)) |>
        @orderby(key(_)) |>
        collect;

    x_lbls = map(x -> key(x), pos_by_hour);
    y = []
    for group in pos_by_hour
        push!(y, group)
    end

    violin(y,
        xticks=(1:length(x_lbls), x_lbls),
        fontfamily="Computer Modern",
        fill="green",
        linewidth=0,
        title="Nominal returns by hour (open time)",
        legend=false)
end



function plot_nominal_cum_returns_by_hour(
    positions::Vector{Position},
    ret_func::Function
)
    if length(positions) == 0
        return plot(title="No positions")
    end

    pos_by_hour = positions |>
        @groupby(Dates.hour(_.open_dt), _) |>
        @orderby(key(_)) |>
        @map(key(_) => sort(collect(_), by=x -> x.open_dt)) |>
        collect

    max_date = maximum([maximum(map(x -> x.last_dt, p)) for (h, p) in pos_by_hour])
    plt = 0
    for (i, (hour, positions)) in enumerate(pos_by_hour)
        dts = collect(Iterators.flatten(map(x -> (x.open_dt, x.last_dt), positions)))
        rets = collect(Iterators.flatten(map(x -> (0.0, ret_func(x)), positions)))
        cum_rets = cumsum(rets)
        lbl = "$(hour):00+"
        if i == 1
            plt = plot(dts, cum_rets;
                fontfamily="Computer Modern",
                legend=:topleft,
                label=lbl,
                right_margin=8mm,
                title="Nominal returns by hour",
                size=(800, 600))
        else
            plot!(dts, cum_rets; label=lbl)
        end
        annotate!(max_date, cum_rets[end], text(lbl, :left, 9; family="Computer Modern"))
    end
    plt
end

function plot_nominal_cum_returns_by_hour_seq_net(positions::Vector{Position})
    plot_nominal_cum_returns_by_hour_seq(positions, calc_nominal_return_net, "Net cumulative returns by hour")
end

function plot_nominal_cum_returns_by_hour_seq_gross(positions::Vector{Position})
    plot_nominal_cum_returns_by_hour_seq(positions, calc_nominal_return_gross, "Gross cumulative returns by hour")
end

function plot_nominal_cum_returns_by_hour_seq(
    positions::Vector{Position},
    ret_func::Function,
    title_str::String
)
    if length(positions) == 0
        return plot(title="No positions")
    end

    pos_by_hour = positions |>
        @groupby(Dates.hour(_.open_dt), _) |>
        @orderby(key(_)) |>
        @map(key(_) => sort(collect(_), by=x -> x.open_dt)) |>
        collect

    max_n_pos = maximum(map(x -> length(x[2]), pos_by_hour))
    min_date_str = Dates.format(minimum(map(x -> x.open_dt, positions)), "yyyy/mm/dd")
    max_date_str = Dates.format(maximum(map(x -> x.open_dt, positions)), "yyyy/mm/dd")

    plt = 0
    for (i, (hour, positions)) in enumerate(pos_by_hour)
        rets = map(ret_func, positions)
        n_pos = length(rets)
        x = collect(1:n_pos)
        cum_rets = 1.0 .+ cumsum(rets)
        lbl = "$(hour):00"
        if i == 1
            plt = plot(x, cum_rets;
                fontfamily="Computer Modern",
                xticks=((1, max_n_pos), (min_date_str, max_date_str)),
                legendfontsize=9,
                yformatter = y -> fmt(".1f", y)*"\$",
                fontsize=9,
                w=0.5,
                foreground_color_legend=nothing,
                background_color_legend=nothing,
                tickfontsize=9,
                # legend=:topright,
                legend=:outertopright,
                label=lbl,
                # right_margin=08mm,
                title=title_str)
            xlims!(plt, (1, floor(Int64, 1.1*max_n_pos)))
        else
            plot!(x, cum_rets;
                label=lbl,
                w=0.5)
        end
        annotate!(n_pos + floor(Int64, 0.03*n_pos),
            cum_rets[end],
            text(lbl, :left, 8; family="Computer Modern"))
    end
    plt
end




function plot_nominal_cum_returns_by_weekday(
    positions::Vector{Position},
    ret_func::Function
)
    if length(positions) == 0
        return plot(title="No positions")
    end

    pos_by_day = positions |>
        @groupby(Dates.dayofweek(_.open_dt), _) |>
        @orderby(key(_)) |>
        @map(key(_) => sort(collect(_), by=x -> x.open_dt)) |>
        collect

    max_date = maximum([maximum(map(x -> x.last_dt, p)) for (h, p) in pos_by_day])
    plt = 0
    for (i, (weekday, positions)) in enumerate(pos_by_day)
        dts = collect(Iterators.flatten(map(x -> (x.open_dt, x.last_dt), positions)))
        rets = collect(Iterators.flatten(map(x -> (0.0, ret_func(x)), positions)))
        cum_rets = cumsum(rets)
        lbl = Dates.dayname(weekday)[1:3]
        if i == 1
            plt = plot(dts, cum_rets;
                fontfamily="Computer Modern",
                legend=:topleft,
                label=lbl,
                right_margin=8mm,
                title="Nominal returns by weekday",
                size=(800, 600))
        else
            plot!(dts, cum_rets; label=lbl)
        end
        annotate!(max_date, cum_rets[end], text(lbl, :left, 8; family="Computer Modern"))
    end
    plt
end



function plot_nominal_cum_returns_by_weekday_seq(
    positions::Vector{Position},
    ret_func::Function
)
    if length(positions) == 0
        return plot(title="No positions")
    end

    pos_by_day = positions |>
        @groupby(Dates.dayofweek(_.open_dt), _) |>
        @orderby(key(_)) |>
        @map(key(_) => sort(collect(_), by=x -> x.open_dt)) |>
        collect

    max_count = maximum([length(p) for (h, p) in pos_by_day])
    plt = 0
    for (i, (weekday, positions)) in enumerate(pos_by_day)
        rets = map(ret_func, positions)
        n_pos = length(rets)
        x = collect(1:n_pos)
        cum_rets = cumsum(rets)
        lbl = Dates.dayname(weekday)[1:3]
        if i == 1
            plt = plot(x, cum_rets;
                fontfamily="Computer Modern",
                legend=:bottomleft,
                label=lbl,
                right_margin=8mm,
                title="Nominal returns by weekday",
                size=(800, 600))
        else
            plot!(x, cum_rets; label=lbl)
        end
        annotate!(n_pos + 1, cum_rets[end], text(lbl, :left, 8; family="Computer Modern"))
    end
    plt
end
